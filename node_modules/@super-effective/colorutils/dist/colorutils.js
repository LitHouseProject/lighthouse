'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * Takes given cyan, magenta, yellow, and black values and returns the RGB representation
 * @param {number} cyan The cyan component of the color (percentage represented as 0 - 1)
 * @param {number} magenta The magenta component of the color (percentage represented as 0 - 1)
 * @param {number} yellow The yellow component of the color (percentage represented as 0 - 1)
 * @param {number} black The black component of the color (percentage represented as 0 - 1)
 * @returns {Rgb} The Rgb representation of the color
 */
function cmykToRgb(cyan, magenta, yellow, black) {
    var blackModifier = 1 - (black);
    var red = Math.round(255 * (1 - cyan) * blackModifier);
    var green = Math.round(255 * (1 - magenta) * blackModifier);
    var blue = Math.round(255 * (1 - yellow) * blackModifier);
    return {
        red: red,
        green: green,
        blue: blue,
    };
}

/**
 * Takes given red, green, and blue values and returns the hex color representation
 * @param {number} red The red component of the color (0 - 255)
 * @param {number} green The green component of the color (0 - 255)
 * @param {number} blue The blue component of the color (0 - 255)
 * @returns {string} The hex string representation of the color
 */
function rgbToHex(red, green, blue) {
    var rgb = blue | (green << 8) | (red << 16);
    return "#" + (0x1000000 + rgb).toString(16).slice(1);
}

/**
 * Takes given cyan, magenta, yellow, and black values and returns the hex representation
 * @param {number} cyan The cyan component of the color (percentage represented as 0 - 1)
 * @param {number} magenta The magenta component of the color (percentage represented as 0 - 1)
 * @param {number} yellow The yellow component of the color (percentage represented as 0 - 1)
 * @param {number} black The black component of the color (percentage represented as 0 - 1)
 * @returns {string} The hex representation of the color
 */
function cmykToHex(cyan, magenta, yellow, black) {
    var _a = cmykToRgb(cyan, magenta, yellow, black), red = _a.red, green = _a.green, blue = _a.blue;
    return rgbToHex(red, green, blue);
}

/**
 * Get the perceived brightness of a given color
 * See: https://www.w3.org/TR/AERT/#color-contrast
 * @param {number} red The red component of the color (0 - 255)
 * @param {number} green The green component of the color (0 - 255)
 * @param {number} blue The blue component of the color (0 - 255)
 * @returns {number} The perceived brightness of the color (0.0 - 1.0)
 */
function getPerceivedLuminance(red, green, blue) {
    return ((red * 0.299) + (green * 0.587) + (blue * 0.114)) / 255;
}

/**
 * Converts a hex color string to its red, green, and blue component values
 * @param {string} colorHex The color value in hex format
 * @returns {Rgb} The RGB values for the color
 */
function hexToRgb(colorHex) {
    var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');
    if (sanitizedHex.length !== 6 && sanitizedHex.length !== 3) {
        throw new Error("Color should be either 3 or 6 characters in length - received a length of " + sanitizedHex.length);
    }
    if (sanitizedHex.length === 3) {
        sanitizedHex = "" + sanitizedHex[0].repeat(2) + sanitizedHex[1].repeat(2) + sanitizedHex[2].repeat(2);
    }
    var rgb = parseInt(sanitizedHex, 16);
    if (Number.isNaN(rgb)) {
        throw new Error("Unable to parse hex color " + colorHex);
    }
    var red = (rgb >> 16) & 0xff;
    var green = (rgb >> 8) & 0xff;
    var blue = (rgb) & 0xff;
    return {
        red: red,
        green: green,
        blue: blue,
    };
}

/**
 * Takes given red, green, and blue values and returns the CMYK representation
 * @param {number} red The red component of the color (0 - 255)
 * @param {number} green The green component of the color (0 - 255)
 * @param {number} blue The blue component of the color (0 - 255)
 * @returns {Cmyk} The CMYK representation of the color
 */
function rgbToCmyk(red, green, blue) {
    var redPercent = red / 255;
    var greenPercent = green / 255;
    var bluePercent = blue / 255;
    var black = Math.min(1 - redPercent, 1 - greenPercent, 1 - bluePercent);
    var cyan = (1 - redPercent - black) / (1 - black) || 0;
    var magenta = (1 - greenPercent - black) / (1 - black) || 0;
    var yellow = (1 - bluePercent - black) / (1 - black) || 0;
    return {
        cyan: cyan,
        magenta: magenta,
        yellow: yellow,
        black: black,
    };
}

/**
 * Converts a hex color string to its CMYK representation
 * @param {string} colorHex The color value in hex format
 * @returns {Cmyk} The CMYK values for the color
 */
function hexToCmyk(colorHex) {
    // Hex validation handled by hexToRgb
    var _a = hexToRgb(colorHex), red = _a.red, green = _a.green, blue = _a.blue;
    return rgbToCmyk(red, green, blue);
}

/**
 * Takes given red, green, and blue values and returns the HSL representation
 * @param {number} red The red component of the color (0 - 255)
 * @param {number} green The green component of the color (0 - 255)
 * @param {number} blue The blue component of the color (0 - 255)
 * @returns {Hsl} The HSL representation of the color
 */
function rgbToHsl(red, green, blue) {
    var redPercent = red / 255;
    var greenPercent = green / 255;
    var bluePercent = blue / 255;
    var max = Math.max(redPercent, greenPercent, bluePercent);
    var min = Math.min(redPercent, greenPercent, bluePercent);
    var lightness = (max + min) / 2;
    var hue = 0;
    var saturation = 0;
    if (red === green && red === blue) ;
    else {
        var diff = max - min;
        saturation = lightness > 0.5 ? (diff / (2 - max - min)) : diff / (max + min);
        switch (max) {
            case redPercent: {
                hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);
                break;
            }
            case greenPercent: {
                hue = (bluePercent - redPercent) / diff + 2;
                break;
            }
            case bluePercent: {
                hue = (redPercent - greenPercent) / diff + 4;
                break;
            }
        }
        hue /= 6;
        hue *= 360;
    }
    return {
        hue: hue,
        saturation: saturation,
        lightness: lightness,
    };
}

/**
 * Converts a hex color string to its hue, saturation, and lightness
 * @param {string} colorHex The color value in hex format
 * @returns {Hsl} The HSL values for the color
 */
function hexToHsl(colorHex) {
    // Hex validation handled by hexToRgb
    var _a = hexToRgb(colorHex), red = _a.red, green = _a.green, blue = _a.blue;
    return rgbToHsl(red, green, blue);
}

/**
 * Takes given red, green, and blue values and returns the HSV representation
 * @param {number} red The red component of the color (0 - 255)
 * @param {number} green The green component of the color (0 - 255)
 * @param {number} blue The blue component of the color (0 - 255)
 * @returns {Hsv} The HSV representation of the color
 */
function rgbToHsv(red, green, blue) {
    var redPercent = red / 255;
    var greenPercent = green / 255;
    var bluePercent = blue / 255;
    var max = Math.max(redPercent, greenPercent, bluePercent);
    var min = Math.min(redPercent, greenPercent, bluePercent);
    var diff = max - min;
    var hue = 0;
    var saturation = (max === 0) ? 0 : diff / max;
    var value = max;
    if (min === max) ;
    else {
        switch (max) {
            case redPercent: {
                hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);
                break;
            }
            case greenPercent: {
                hue = (bluePercent - redPercent) / diff + 2;
                break;
            }
            case bluePercent: {
                hue = (redPercent - greenPercent) / diff + 4;
                break;
            }
        }
        hue /= 6;
        hue *= 360;
    }
    return {
        hue: hue,
        saturation: saturation,
        value: value,
    };
}

/**
 * Converts a hex color string to its hue, saturation, and value
 * @param {string} colorHex The color value in hex format
 * @returns {Hsv} The HSV values for the color
 */
function hexToHsv(colorHex) {
    // Hex validation handled by hexToRgb
    var _a = hexToRgb(colorHex), red = _a.red, green = _a.green, blue = _a.blue;
    return rgbToHsv(red, green, blue);
}

function hueToRgb(p, q, t) {
    var clampedT = t;
    if (t < 0) {
        clampedT += 360;
    }
    if (clampedT > 360) {
        clampedT -= 360;
    }
    if (clampedT < 60) {
        return p + (q - p) * 6 * (clampedT / 360);
    }
    if (clampedT < 180) {
        return q;
    }
    if (clampedT < 240) {
        return p + (q - p) * ((240 - clampedT) / 360) * 6;
    }
    return p;
}
/**
 * Takes given hue, saturation and lightness and returns the respective RGB values
 * @param {number} hue The hue of the color (0.0 - 360.0)
 * @param {number} saturation The saturation of the color (0.0 - 1.0)
 * @param {number} lightness The value of the color (0.0 - 1.0)
 * @returns {Rgb} The RGB values for the color
 */
function hslToRgb(hue, saturation, lightness) {
    // Bounds check
    if ((hue < 0 || hue > 360)
        || (saturation < 0 || saturation > 1)
        || (lightness < 0 || lightness > 1)) {
        throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');
    }
    // Achromatic
    if (saturation === 0) {
        var rgb = Math.round(lightness * 255);
        return {
            red: rgb,
            green: rgb,
            blue: rgb,
        };
    }
    var q = (lightness < 0.5) ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
    var p = 2 * lightness - q;
    var red = hueToRgb(p, q, hue + 120);
    var green = hueToRgb(p, q, hue);
    var blue = hueToRgb(p, q, hue - 120);
    return {
        red: Math.round(red * 255),
        green: Math.round(green * 255),
        blue: Math.round(blue * 255),
    };
}

/**
 * Takes given hue, saturation and lightness and returns the hex color representation
 * @param {number} hue The hue of the color (0.0 - 360.0)
 * @param {number} saturation The saturation of the color (0.0 - 1.0)
 * @param {number} lightness The lightness of the color (0.0 - 1.0)
 * @returns {string} The hex string representation of the color
 */
function hslToHex(hue, saturation, lightness) {
    // Bounds check handled by hslToRgb
    var _a = hslToRgb(hue, saturation, lightness), red = _a.red, green = _a.green, blue = _a.blue;
    return rgbToHex(red, green, blue);
}

/**
 * Takes given hue, saturation and value and returns the respective RGB values
 * @param {number} hue The hue of the color (0.0 - 360.0)
 * @param {number} saturation The saturation of the color (0.0 - 1.0)
 * @param {number} value The value of the color (0.0 - 1.0)
 * @returns {Rgb} The RGB values for the color
 */
function hsvToRgb(hue, saturation, value) {
    // Bounds check
    if ((hue < 0 || hue > 360)
        || (saturation < 0 || saturation > 1)
        || (value < 0 || value > 1)) {
        throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');
    }
    var red = 0;
    var green = 0;
    var blue = 0;
    var huePercent = hue / 360;
    var i = Math.floor(huePercent * 6);
    var f = huePercent * 6 - i;
    var p = value * (1 - saturation);
    var q = value * (1 - f * saturation);
    var t = value * (1 - (1 - f) * saturation);
    switch (i % 6) {
        case 0: {
            red = value;
            green = t;
            blue = p;
            break;
        }
        case 1: {
            red = q;
            green = value;
            blue = p;
            break;
        }
        case 2: {
            red = p;
            green = value;
            blue = t;
            break;
        }
        case 3: {
            red = p;
            green = q;
            blue = value;
            break;
        }
        case 4: {
            red = t;
            green = p;
            blue = value;
            break;
        }
        case 5: {
            red = value;
            green = p;
            blue = q;
            break;
        }
    }
    red = Math.round(red * 255);
    green = Math.round(green * 255);
    blue = Math.round(blue * 255);
    return {
        red: red,
        green: green,
        blue: blue,
    };
}

/**
 * Takes given hue, saturation and value and returns the hex color representation
 * @param {number} hue The hue of the color (0.0 - 360.0)
 * @param {number} saturation The saturation of the color (0.0 - 1.0)
 * @param {number} value The value of the color (0.0 - 1.0)
 * @returns {string} The hex string representation of the color
 */
function hsvToHex(hue, saturation, value) {
    // Bounds check handled by hsvToRgb
    var _a = hsvToRgb(hue, saturation, value), red = _a.red, green = _a.green, blue = _a.blue;
    return rgbToHex(red, green, blue);
}

/**
 * Removes invalid characters and formats color hex to 6 characters
 * @param {string} colorHex The color value in hex format to sanitize
 * @returns {string} The sanitized hex color
 */
function sanitizeHex(colorHex) {
    var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');
    if (sanitizedHex.length === 0) {
        sanitizedHex = '000000';
    }
    else if (sanitizedHex.length === 1) {
        sanitizedHex = sanitizedHex[0].repeat(6);
    }
    else if (sanitizedHex.length === 2) {
        sanitizedHex = "" + sanitizedHex[0].repeat(3) + sanitizedHex[1].repeat(3);
    }
    else if (sanitizedHex.length >= 3 && sanitizedHex.length < 6) {
        sanitizedHex = "" + sanitizedHex[0].repeat(2) + sanitizedHex[1].repeat(2) + sanitizedHex[2].repeat(2);
    }
    else if (sanitizedHex.length > 6) {
        sanitizedHex = sanitizedHex.substr(0, 6);
    }
    return "#" + sanitizedHex;
}

exports.cmykToHex = cmykToHex;
exports.cmykToRgb = cmykToRgb;
exports.getPerceivedLuminance = getPerceivedLuminance;
exports.hexToCmyk = hexToCmyk;
exports.hexToHsl = hexToHsl;
exports.hexToHsv = hexToHsv;
exports.hexToRgb = hexToRgb;
exports.hslToHex = hslToHex;
exports.hslToRgb = hslToRgb;
exports.hsvToHex = hsvToHex;
exports.hsvToRgb = hsvToRgb;
exports.rgbToCmyk = rgbToCmyk;
exports.rgbToHex = rgbToHex;
exports.rgbToHsl = rgbToHsl;
exports.rgbToHsv = rgbToHsv;
exports.sanitizeHex = sanitizeHex;
//# sourceMappingURL=colorutils.js.map
