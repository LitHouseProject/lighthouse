{"ast":null,"code":"import { jsx, jsxs } from 'react/jsx-runtime';\nimport { useState, useRef, useCallback, useEffect } from 'react';\nimport classNames from 'classnames';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n/**\r\n * Takes given cyan, magenta, yellow, and black values and returns the RGB representation\r\n * @param {number} cyan The cyan component of the color (percentage represented as 0 - 1)\r\n * @param {number} magenta The magenta component of the color (percentage represented as 0 - 1)\r\n * @param {number} yellow The yellow component of the color (percentage represented as 0 - 1)\r\n * @param {number} black The black component of the color (percentage represented as 0 - 1)\r\n * @returns {Rgb} The Rgb representation of the color\r\n */\n\n/**\r\n * Takes given red, green, and blue values and returns the hex color representation\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {string} The hex string representation of the color\r\n */\n\n\nfunction rgbToHex(red, green, blue) {\n  var rgb = blue | green << 8 | red << 16;\n  return \"#\" + (0x1000000 + rgb).toString(16).slice(1);\n}\n/**\r\n * Converts a hex color string to its red, green, and blue component values\r\n * @param {string} colorHex The color value in hex format\r\n * @returns {Rgb} The RGB values for the color\r\n */\n\n\nfunction hexToRgb(colorHex) {\n  var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length !== 6 && sanitizedHex.length !== 3) {\n    throw new Error(\"Color should be either 3 or 6 characters in length - received a length of \" + sanitizedHex.length);\n  }\n\n  if (sanitizedHex.length === 3) {\n    sanitizedHex = \"\" + sanitizedHex[0].repeat(2) + sanitizedHex[1].repeat(2) + sanitizedHex[2].repeat(2);\n  }\n\n  var rgb = parseInt(sanitizedHex, 16);\n\n  if (Number.isNaN(rgb)) {\n    throw new Error(\"Unable to parse hex color \" + colorHex);\n  }\n\n  var red = rgb >> 16 & 0xff;\n  var green = rgb >> 8 & 0xff;\n  var blue = rgb & 0xff;\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n/**\r\n * Takes given red, green, and blue values and returns the HSV representation\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {Hsv} The HSV representation of the color\r\n */\n\n\nfunction rgbToHsv(red, green, blue) {\n  var redPercent = red / 255;\n  var greenPercent = green / 255;\n  var bluePercent = blue / 255;\n  var max = Math.max(redPercent, greenPercent, bluePercent);\n  var min = Math.min(redPercent, greenPercent, bluePercent);\n  var diff = max - min;\n  var hue = 0;\n  var saturation = max === 0 ? 0 : diff / max;\n  var value = max;\n  if (min === max) ;else {\n    switch (max) {\n      case redPercent:\n        {\n          hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);\n          break;\n        }\n\n      case greenPercent:\n        {\n          hue = (bluePercent - redPercent) / diff + 2;\n          break;\n        }\n\n      case bluePercent:\n        {\n          hue = (redPercent - greenPercent) / diff + 4;\n          break;\n        }\n    }\n\n    hue /= 6;\n    hue *= 360;\n  }\n  return {\n    hue: hue,\n    saturation: saturation,\n    value: value\n  };\n}\n/**\r\n * Converts a hex color string to its hue, saturation, and value\r\n * @param {string} colorHex The color value in hex format\r\n * @returns {Hsv} The HSV values for the color\r\n */\n\n\nfunction hexToHsv(colorHex) {\n  // Hex validation handled by hexToRgb\n  var _a = hexToRgb(colorHex),\n      red = _a.red,\n      green = _a.green,\n      blue = _a.blue;\n\n  return rgbToHsv(red, green, blue);\n}\n/**\r\n * Takes given hue, saturation and value and returns the respective RGB values\r\n * @param {number} hue The hue of the color (0.0 - 360.0)\r\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\r\n * @param {number} value The value of the color (0.0 - 1.0)\r\n * @returns {Rgb} The RGB values for the color\r\n */\n\n\nfunction hsvToRgb(hue, saturation, value) {\n  // Bounds check\n  if (hue < 0 || hue > 360 || saturation < 0 || saturation > 1 || value < 0 || value > 1) {\n    throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');\n  }\n\n  var red = 0;\n  var green = 0;\n  var blue = 0;\n  var huePercent = hue / 360;\n  var i = Math.floor(huePercent * 6);\n  var f = huePercent * 6 - i;\n  var p = value * (1 - saturation);\n  var q = value * (1 - f * saturation);\n  var t = value * (1 - (1 - f) * saturation);\n\n  switch (i % 6) {\n    case 0:\n      {\n        red = value;\n        green = t;\n        blue = p;\n        break;\n      }\n\n    case 1:\n      {\n        red = q;\n        green = value;\n        blue = p;\n        break;\n      }\n\n    case 2:\n      {\n        red = p;\n        green = value;\n        blue = t;\n        break;\n      }\n\n    case 3:\n      {\n        red = p;\n        green = q;\n        blue = value;\n        break;\n      }\n\n    case 4:\n      {\n        red = t;\n        green = p;\n        blue = value;\n        break;\n      }\n\n    case 5:\n      {\n        red = value;\n        green = p;\n        blue = q;\n        break;\n      }\n  }\n\n  red = Math.round(red * 255);\n  green = Math.round(green * 255);\n  blue = Math.round(blue * 255);\n  return {\n    red: red,\n    green: green,\n    blue: blue\n  };\n}\n/**\r\n * Takes given hue, saturation and value and returns the hex color representation\r\n * @param {number} hue The hue of the color (0.0 - 360.0)\r\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\r\n * @param {number} value The value of the color (0.0 - 1.0)\r\n * @returns {string} The hex string representation of the color\r\n */\n\n\nfunction hsvToHex(hue, saturation, value) {\n  // Bounds check handled by hsvToRgb\n  var _a = hsvToRgb(hue, saturation, value),\n      red = _a.red,\n      green = _a.green,\n      blue = _a.blue;\n\n  return rgbToHex(red, green, blue);\n}\n/**\r\n * Removes invalid characters and formats color hex to 6 characters\r\n * @param {string} colorHex The color value in hex format to sanitize\r\n * @returns {string} The sanitized hex color\r\n */\n\n\nfunction sanitizeHex(colorHex) {\n  var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\n\n  if (sanitizedHex.length === 0) {\n    sanitizedHex = '000000';\n  } else if (sanitizedHex.length === 1) {\n    sanitizedHex = sanitizedHex[0].repeat(6);\n  } else if (sanitizedHex.length === 2) {\n    sanitizedHex = \"\" + sanitizedHex[0].repeat(3) + sanitizedHex[1].repeat(3);\n  } else if (sanitizedHex.length >= 3 && sanitizedHex.length < 6) {\n    sanitizedHex = \"\" + sanitizedHex[0].repeat(2) + sanitizedHex[1].repeat(2) + sanitizedHex[2].repeat(2);\n  } else if (sanitizedHex.length > 6) {\n    sanitizedHex = sanitizedHex.substr(0, 6);\n  }\n\n  return \"#\" + sanitizedHex;\n}\n/**\r\n * Sanitize and combine classNames to a single string\r\n * @param  {string[]} classNames The classNames to combine\r\n * @returns {string} The combined class names\r\n */\n\n/**\r\n * Get the hue value from a given position on the hue slider\r\n * @param {number} x The x coordinate on the hue slider\r\n * @param {number} width The width of the hue slider\r\n * @returns {number} The hue based on the x position\r\n */\n\n\nfunction getHueFromPosition(x, width) {\n  if (!width) {\n    return 0;\n  }\n\n  var percentage = x / width;\n  var hue = Math.max(Math.min(percentage, 1), 0) * 360;\n  return hue;\n}\n/**\r\n * Get the saturation and value from a given position on the SV slider\r\n * @param {number} x The x coordinate on the SV selector\r\n * @param {number} y The y coordinate on the SV selector\r\n * @param {number} width The width of the SV selector\r\n * @param {number} height The height of the SV selector\r\n * @returns {SaturationValue} The saturation and value based on the position\r\n */\n\n\nfunction getSaturationValueFromPosition(x, y, width, height) {\n  var percentageX = !width ? 0 : x / width;\n  var percentageY = !height ? 0 : 1 - y / height;\n  var saturation = Math.max(Math.min(percentageX, 1), 0);\n  var value = Math.max(Math.min(percentageY, 1), 0);\n  return {\n    saturation: saturation,\n    value: value\n  };\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z$2 = \".HueSlider-module_hue_slider__3-jXT {\\n  position: relative;\\n  height: 28px;\\n  margin-left: 11px;\\n  margin-right: 11px;\\n  margin-bottom: 2px;\\n  background-image: linear-gradient(to left, #ff0000 0%, #ff00ff 16.66%, #0000ff 33.33%, #00ffff 50%, #00ff00 66.66%, #ffff00 80.33%, #ff0000 100%);\\n}\\n.HueSlider-module_hue_slider__3-jXT.HueSlider-module_vertical__2dAq_ {\\n  width: 28px;\\n  height: 100%;\\n  background-image: linear-gradient(to top, #ff0000 0%, #ff00ff 16.66%, #0000ff 33.33%, #00ffff 50%, #00ff00 66.66%, #ffff00 80.33%, #ff0000 100%);\\n}\\n.HueSlider-module_hue_slider__3-jXT.HueSlider-module_vertical__2dAq_ .HueSlider-module_hue_slider_picker__1XZR2 {\\n  top: 0;\\n  left: -2px;\\n  width: 100%;\\n  height: 18px;\\n  transform: translateY(-50%);\\n}\\n.HueSlider-module_hue_slider__3-jXT .HueSlider-module_hue_slider_picker__1XZR2 {\\n  position: absolute;\\n  top: -2px;\\n  left: 0;\\n  width: 18px;\\n  height: 100%;\\n  border: 2px solid #ffffff;\\n  box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.5);\\n  background-color: #ff0000;\\n  border-radius: 11px;\\n  cursor: pointer;\\n  transform: translateX(-50%);\\n}\";\nvar styles$2 = {\n  \"hue_slider\": \"HueSlider-module_hue_slider__3-jXT\",\n  \"vertical\": \"HueSlider-module_vertical__2dAq_\",\n  \"hue_slider_picker\": \"HueSlider-module_hue_slider_picker__1XZR2\"\n};\nstyleInject(css_248z$2);\n\nvar HueSlider = function (_a) {\n  var _b;\n\n  var className = _a.className,\n      pickerClassName = _a.pickerClassName,\n      hue = _a.hue,\n      _c = _a.layout,\n      layout = _c === void 0 ? 'HORIZONTAL' : _c,\n      onChange = _a.onChange,\n      _d = _a.onInteractionStart,\n      onInteractionStart = _d === void 0 ? function () {} : _d,\n      _e = _a.onInteractionEnd,\n      onInteractionEnd = _e === void 0 ? function () {} : _e;\n\n  var _f = useState(false),\n      isInteracting = _f[0],\n      setIsInteracting = _f[1];\n\n  var sliderDivRef = useRef(null);\n  var hueColor = hsvToHex(hue, 1, 1);\n  var updateHue = useCallback(function (evt) {\n    if (!sliderDivRef.current) {\n      return;\n    }\n\n    var huePosition = sliderDivRef.current.getBoundingClientRect();\n\n    switch (layout) {\n      case HueSlider.LAYOUTS.VERTICAL:\n        {\n          var y = evt.clientY - huePosition.top;\n          var updatedHue = getHueFromPosition(y, sliderDivRef.current.clientHeight);\n          onChange(updatedHue);\n          break;\n        }\n\n      default:\n        {\n          var x = evt.clientX - huePosition.left;\n          var updatedHue = getHueFromPosition(x, sliderDivRef.current.clientWidth);\n          onChange(updatedHue);\n        }\n    }\n  }, [onChange]);\n  var onPointerDown = useCallback(function (evt) {\n    evt.target.setPointerCapture(evt.pointerId);\n    onInteractionStart();\n    setIsInteracting(true);\n    updateHue(evt);\n  }, [onInteractionStart, updateHue]);\n  var onPointerUp = useCallback(function (evt) {\n    evt.target.releasePointerCapture(evt.pointerId);\n    onInteractionEnd();\n    setIsInteracting(false);\n  }, [onInteractionEnd]);\n  var onMouseDown = useCallback(function (evt) {\n    onInteractionStart();\n    setIsInteracting(true);\n    updateHue(evt);\n  }, [onInteractionStart, updateHue]);\n  var onMove = useCallback(function (evt) {\n    if (isInteracting) {\n      updateHue(evt);\n    }\n  }, [isInteracting, updateHue]);\n  var onMouseUp = useCallback(function () {\n    onInteractionEnd();\n    setIsInteracting(false);\n  }, [onInteractionEnd]); // Setup pointer events for supported browsers for two reasons:\n  //   1. It allows for pointer capture which allows for continued\n  //      interaction even when the cursor/pointer outside of picker\n  //   2. It allows for unified code across devices (mobile and desktop)\n\n  var interactionCallbacks = window.PointerEvent ? {\n    onPointerDown: onPointerDown,\n    onPointerMove: onMove,\n    onPointerUp: onPointerUp\n  } : {\n    onMouseDown: onMouseDown,\n    onMouseMove: onMove,\n    onMouseUp: onMouseUp\n  };\n  var sliderStyle = layout === HueSlider.LAYOUTS.VERTICAL ? {\n    top: hue / 360 * 100 + \"%\",\n    backgroundColor: hueColor\n  } : {\n    left: hue / 360 * 100 + \"%\",\n    backgroundColor: hueColor\n  };\n  return jsx(\"div\", __assign({\n    className: classNames(styles$2.hue_slider, className, (_b = {}, _b[styles$2.vertical] = layout === HueSlider.LAYOUTS.VERTICAL, _b)),\n    ref: sliderDivRef,\n    title: \"Hue\"\n  }, interactionCallbacks, {\n    children: jsx(\"div\", {\n      className: classNames(styles$2.hue_slider_picker, pickerClassName),\n      style: sliderStyle\n    }, void 0)\n  }), void 0);\n};\n\nHueSlider.LAYOUTS = {\n  HORIZONTAL: 'HORIZONTAL',\n  VERTICAL: 'VERTICAL'\n};\nvar css_248z$1 = \".SaturationValueSelector-module_saturation_value_selector__3JODT {\\n  position: relative;\\n  box-sizing: border-box;\\n  height: 100%;\\n  overflow: hidden;\\n  margin-left: 11px;\\n  margin-right: 11px;\\n  background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, #000000 100%), linear-gradient(to left, rgba(255, 255, 255, 0) 0%, #ffffff 100%);\\n  background-color: #ffffff;\\n}\\n.SaturationValueSelector-module_saturation_value_selector__3JODT .SaturationValueSelector-module_saturation_value_picker__15E1- {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 28px;\\n  height: 28px;\\n  box-sizing: border-box;\\n  border: 2px solid #ffffff;\\n  box-shadow: 0 0 4px 0 rgba(0, 0, 0, 0.5);\\n  border-radius: 14px;\\n  cursor: pointer;\\n  transform: translate(-50%, -50%);\\n}\";\nvar styles$1 = {\n  \"saturation_value_selector\": \"SaturationValueSelector-module_saturation_value_selector__3JODT\",\n  \"saturation_value_picker\": \"SaturationValueSelector-module_saturation_value_picker__15E1-\"\n};\nstyleInject(css_248z$1);\n\nvar SaturationValueSelector = function (_a) {\n  var className = _a.className,\n      pickerClassName = _a.pickerClassName,\n      hue = _a.hue,\n      saturation = _a.saturation,\n      value = _a.value,\n      onChange = _a.onChange,\n      _b = _a.onInteractionStart,\n      onInteractionStart = _b === void 0 ? function () {} : _b,\n      _c = _a.onInteractionEnd,\n      onInteractionEnd = _c === void 0 ? function () {} : _c;\n\n  var _d = useState(false),\n      isInteracting = _d[0],\n      setIsInteracting = _d[1];\n\n  var selectorDivRef = useRef(null);\n  var hueColor = hsvToHex(hue, 1, 1);\n  var hex = hsvToHex(hue, saturation, value);\n  var updateSaturationValue = useCallback(function (evt) {\n    if (!selectorDivRef.current) {\n      return;\n    }\n\n    var svPosition = selectorDivRef.current.getBoundingClientRect();\n    var x = evt.clientX - svPosition.left;\n    var y = evt.clientY - svPosition.top;\n    var updatedSaturationValue = getSaturationValueFromPosition(x, y, selectorDivRef.current.clientWidth, selectorDivRef.current.clientHeight);\n    onChange(updatedSaturationValue);\n  }, [onChange]);\n  var onPointerDown = useCallback(function (evt) {\n    evt.target.setPointerCapture(evt.pointerId);\n    onInteractionStart();\n    setIsInteracting(true);\n    updateSaturationValue(evt);\n  }, [onInteractionStart, updateSaturationValue]);\n  var onPointerUp = useCallback(function (evt) {\n    evt.target.releasePointerCapture(evt.pointerId);\n    onInteractionEnd();\n    setIsInteracting(false);\n  }, [onInteractionEnd]);\n  var onMouseDown = useCallback(function (evt) {\n    onInteractionStart();\n    setIsInteracting(true);\n    updateSaturationValue(evt);\n  }, [onInteractionStart, updateSaturationValue]);\n  var onMove = useCallback(function (evt) {\n    if (isInteracting) {\n      updateSaturationValue(evt);\n    }\n  }, [isInteracting, updateSaturationValue]);\n  var onMouseUp = useCallback(function () {\n    onInteractionEnd();\n    setIsInteracting(false);\n  }, [onInteractionEnd]); // Setup pointer events for supported browsers for two reasons:\n  //   1. It allows for pointer capture which allows for continued\n  //      interaction even when the cursor/pointer outside of picker\n  //   2. It allows for unified code across devices (mobile and desktop)\n\n  var interactionCallbacks = window.PointerEvent ? {\n    onPointerDown: onPointerDown,\n    onPointerMove: onMove,\n    onPointerUp: onPointerUp\n  } : {\n    onMouseDown: onMouseDown,\n    onMouseMove: onMove,\n    onMouseUp: onMouseUp\n  };\n  return jsx(\"div\", __assign({\n    className: classNames(styles$1.saturation_value_selector, className),\n    style: {\n      backgroundColor: hueColor\n    },\n    ref: selectorDivRef,\n    title: \"Saturation and Value\"\n  }, interactionCallbacks, {\n    children: jsx(\"div\", {\n      className: classNames(styles$1.saturation_value_picker, pickerClassName),\n      style: {\n        left: saturation * 100 + \"%\",\n        top: (1 - value) * 100 + \"%\",\n        backgroundColor: hex\n      }\n    }, void 0)\n  }), void 0);\n};\n\nvar css_248z = \".ReactColorPicker-module_react_color_picker__1OEfS {\\n  display: flex;\\n  flex-direction: column;\\n  width: 100%;\\n  height: 100%;\\n  box-sizing: border-box;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_saturation_value_selector__1Oyfo {\\n  flex: 1 1 0;\\n  margin-bottom: 10px;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_details__106p_ {\\n  display: flex;\\n  align-items: center;\\n  margin-top: 10px;\\n  margin-left: 11px;\\n  margin-right: 11px;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_details__106p_ .ReactColorPicker-module_swatch__3kHFV {\\n  width: 32px;\\n  height: 32px;\\n  margin-right: 10px;\\n  border: 1px solid #ccc;\\n}\\n.ReactColorPicker-module_react_color_picker__1OEfS .ReactColorPicker-module_details__106p_ .ReactColorPicker-module_hex_value__10kKY {\\n  width: 60px;\\n  margin-left: 5px;\\n}\";\nvar styles = {\n  \"react_color_picker\": \"ReactColorPicker-module_react_color_picker__1OEfS\",\n  \"saturation_value_selector\": \"ReactColorPicker-module_saturation_value_selector__1Oyfo\",\n  \"details\": \"ReactColorPicker-module_details__106p_\",\n  \"swatch\": \"ReactColorPicker-module_swatch__3kHFV\",\n  \"hex_value\": \"ReactColorPicker-module_hex_value__10kKY\"\n};\nstyleInject(css_248z);\n\nvar ReactColorPicker = function (_a) {\n  var _b = _a.className,\n      className = _b === void 0 ? null : _b,\n      _c = _a.color,\n      color = _c === void 0 ? '#3cd6bf' : _c,\n      hueClassName = _a.hueClassName,\n      huePickerClassName = _a.huePickerClassName,\n      saturationValueClassName = _a.saturationValueClassName,\n      saturationValuePickerClassName = _a.saturationValuePickerClassName,\n      _d = _a.showHex,\n      showHex = _d === void 0 ? true : _d,\n      _e = _a.showSwatch,\n      showSwatch = _e === void 0 ? true : _e,\n      _f = _a.onChange,\n      onChange = _f === void 0 ? function () {} : _f,\n      _g = _a.onInteractionStart,\n      onInteractionStart = _g === void 0 ? function () {} : _g,\n      _h = _a.onInteractionEnd,\n      onInteractionEnd = _h === void 0 ? function () {} : _h,\n      rest = __rest(_a, [\"className\", \"color\", \"hueClassName\", \"huePickerClassName\", \"saturationValueClassName\", \"saturationValuePickerClassName\", \"showHex\", \"showSwatch\", \"onChange\", \"onInteractionStart\", \"onInteractionEnd\"]);\n\n  var sanitizedColor = sanitizeHex(color || '#000000');\n\n  var _j = useState(sanitizedColor),\n      hex = _j[0],\n      setHex = _j[1];\n\n  var _k = useState(hexToHsv(sanitizedColor)),\n      hsv = _k[0],\n      setHsv = _k[1];\n\n  var _l = useState(false),\n      isInteracting = _l[0],\n      setIsInteracting = _l[1]; // Used when editing the hex through the input\n\n\n  var _m = useState(hex),\n      tempHex = _m[0],\n      setTempHex = _m[1];\n\n  var hsvRef = useRef(hsv);\n  var hexRef = useRef(hex); // Set the hex and hsv states/refs with updated data\n\n  var setColor = function (updatedHex, updatedHsv) {\n    hexRef.current = updatedHex;\n    hsvRef.current = updatedHsv;\n    setHex(updatedHex);\n    setTempHex(updatedHex);\n    setHsv(updatedHsv);\n    onChange(updatedHex);\n  }; // Helper to set the color when HSV change\n\n\n  var setColorFromHsv = function (updatedHsv) {\n    return setColor(hsvToHex(updatedHsv.hue, updatedHsv.saturation, updatedHsv.value), updatedHsv);\n  }; // Helper to set the color when hex changes\n\n\n  var setColorFromHex = function (updatedHex) {\n    return setColor(updatedHex, hexToHsv(updatedHex));\n  };\n\n  var onControlInteractionStart = function () {\n    setIsInteracting(true);\n    onInteractionStart();\n  };\n\n  var onControlInteractionEnd = function () {\n    setIsInteracting(false);\n    onInteractionEnd();\n  }; // Event handler for hex input changes (on blur and enter pressed)\n\n\n  var onHexChange = function (value) {\n    // Strip out invalid characters\n    var sanitizedHex = sanitizeHex(value);\n    setColorFromHex(sanitizedHex);\n  }; // Update color when the passed value changes\n\n\n  useEffect(function () {\n    if (color !== hexRef.current && !isInteracting) {\n      var sanitizedHex = sanitizeHex(color || '#000000');\n      setColorFromHex(sanitizedHex);\n    }\n  }, [color]);\n  var hue = hsv.hue,\n      saturation = hsv.saturation,\n      value = hsv.value;\n  return jsxs(\"div\", __assign({\n    className: \"\" + styles.react_color_picker + (className ? \" \" + className : '')\n  }, rest, {\n    children: [jsx(\"div\", __assign({\n      className: styles.saturation_value_selector\n    }, {\n      children: jsx(SaturationValueSelector, {\n        className: saturationValueClassName,\n        pickerClassName: saturationValuePickerClassName,\n        hue: hue,\n        saturation: saturation,\n        value: value,\n        onChange: function (updatedSaturationValue) {\n          return setColorFromHsv(__assign(__assign({}, hsvRef.current), updatedSaturationValue));\n        },\n        onInteractionStart: onControlInteractionStart,\n        onInteractionEnd: onControlInteractionEnd\n      }, void 0)\n    }), void 0), jsx(HueSlider, {\n      className: hueClassName,\n      pickerClassName: huePickerClassName,\n      hue: hue,\n      onChange: function (updatedHue) {\n        return setColorFromHsv(__assign(__assign({}, hsvRef.current), {\n          hue: updatedHue\n        }));\n      },\n      onInteractionStart: onControlInteractionStart,\n      onInteractionEnd: onControlInteractionEnd\n    }, void 0), (showHex || showSwatch) && jsxs(\"div\", __assign({\n      className: styles.details\n    }, {\n      children: [showSwatch && jsx(\"div\", {\n        className: styles.swatch,\n        style: {\n          backgroundColor: hex\n        },\n        title: \"Swatch\"\n      }, void 0), showHex && jsxs(\"label\", {\n        children: [jsx(\"span\", {\n          children: \"Hex:\"\n        }, void 0), jsx(\"input\", {\n          className: styles.hex_value,\n          value: tempHex,\n          onChange: function (evt) {\n            return setTempHex(evt.target.value);\n          },\n          onBlur: function (evt) {\n            return onHexChange(evt.target.value);\n          },\n          onKeyDown: function (evt) {\n            var inputTarget = evt.target;\n\n            if (evt.key === 'Enter') {\n              onHexChange(inputTarget.value);\n            } else if (evt.key === 'Esc' || evt.key === 'Escape') {\n              // eslint-disable-next-line no-param-reassign\n              inputTarget.value = hexRef.current;\n              inputTarget.blur();\n            }\n          }\n        }, void 0)]\n      }, void 0)]\n    }), void 0)]\n  }), void 0);\n};\n\nexport default ReactColorPicker;\nexport { HueSlider, SaturationValueSelector };","map":{"version":3,"sources":["../node_modules/@super-effective/colorutils/dist/colorutils.es.js","../node_modules/style-inject/dist/style-inject.es.js"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * Takes given cyan, magenta, yellow, and black values and returns the RGB representation\r\n * @param {number} cyan The cyan component of the color (percentage represented as 0 - 1)\r\n * @param {number} magenta The magenta component of the color (percentage represented as 0 - 1)\r\n * @param {number} yellow The yellow component of the color (percentage represented as 0 - 1)\r\n * @param {number} black The black component of the color (percentage represented as 0 - 1)\r\n * @returns {Rgb} The Rgb representation of the color\r\n */\r\nfunction cmykToRgb(cyan, magenta, yellow, black) {\r\n    var blackModifier = 1 - (black);\r\n    var red = Math.round(255 * (1 - cyan) * blackModifier);\r\n    var green = Math.round(255 * (1 - magenta) * blackModifier);\r\n    var blue = Math.round(255 * (1 - yellow) * blackModifier);\r\n    return {\r\n        red: red,\r\n        green: green,\r\n        blue: blue,\r\n    };\r\n}\n\n/**\r\n * Takes given red, green, and blue values and returns the hex color representation\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {string} The hex string representation of the color\r\n */\r\nfunction rgbToHex(red, green, blue) {\r\n    var rgb = blue | (green << 8) | (red << 16);\r\n    return \"#\" + (0x1000000 + rgb).toString(16).slice(1);\r\n}\n\n/**\r\n * Takes given cyan, magenta, yellow, and black values and returns the hex representation\r\n * @param {number} cyan The cyan component of the color (percentage represented as 0 - 1)\r\n * @param {number} magenta The magenta component of the color (percentage represented as 0 - 1)\r\n * @param {number} yellow The yellow component of the color (percentage represented as 0 - 1)\r\n * @param {number} black The black component of the color (percentage represented as 0 - 1)\r\n * @returns {string} The hex representation of the color\r\n */\r\nfunction cmykToHex(cyan, magenta, yellow, black) {\r\n    var _a = cmykToRgb(cyan, magenta, yellow, black), red = _a.red, green = _a.green, blue = _a.blue;\r\n    return rgbToHex(red, green, blue);\r\n}\n\n/**\r\n * Get the perceived brightness of a given color\r\n * See: https://www.w3.org/TR/AERT/#color-contrast\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {number} The perceived brightness of the color (0.0 - 1.0)\r\n */\r\nfunction getPerceivedLuminance(red, green, blue) {\r\n    return ((red * 0.299) + (green * 0.587) + (blue * 0.114)) / 255;\r\n}\n\n/**\r\n * Converts a hex color string to its red, green, and blue component values\r\n * @param {string} colorHex The color value in hex format\r\n * @returns {Rgb} The RGB values for the color\r\n */\r\nfunction hexToRgb(colorHex) {\r\n    var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\r\n    if (sanitizedHex.length !== 6 && sanitizedHex.length !== 3) {\r\n        throw new Error(\"Color should be either 3 or 6 characters in length - received a length of \" + sanitizedHex.length);\r\n    }\r\n    if (sanitizedHex.length === 3) {\r\n        sanitizedHex = \"\" + sanitizedHex[0].repeat(2) + sanitizedHex[1].repeat(2) + sanitizedHex[2].repeat(2);\r\n    }\r\n    var rgb = parseInt(sanitizedHex, 16);\r\n    if (Number.isNaN(rgb)) {\r\n        throw new Error(\"Unable to parse hex color \" + colorHex);\r\n    }\r\n    var red = (rgb >> 16) & 0xff;\r\n    var green = (rgb >> 8) & 0xff;\r\n    var blue = (rgb) & 0xff;\r\n    return {\r\n        red: red,\r\n        green: green,\r\n        blue: blue,\r\n    };\r\n}\n\n/**\r\n * Takes given red, green, and blue values and returns the CMYK representation\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {Cmyk} The CMYK representation of the color\r\n */\r\nfunction rgbToCmyk(red, green, blue) {\r\n    var redPercent = red / 255;\r\n    var greenPercent = green / 255;\r\n    var bluePercent = blue / 255;\r\n    var black = Math.min(1 - redPercent, 1 - greenPercent, 1 - bluePercent);\r\n    var cyan = (1 - redPercent - black) / (1 - black) || 0;\r\n    var magenta = (1 - greenPercent - black) / (1 - black) || 0;\r\n    var yellow = (1 - bluePercent - black) / (1 - black) || 0;\r\n    return {\r\n        cyan: cyan,\r\n        magenta: magenta,\r\n        yellow: yellow,\r\n        black: black,\r\n    };\r\n}\n\n/**\r\n * Converts a hex color string to its CMYK representation\r\n * @param {string} colorHex The color value in hex format\r\n * @returns {Cmyk} The CMYK values for the color\r\n */\r\nfunction hexToCmyk(colorHex) {\r\n    // Hex validation handled by hexToRgb\r\n    var _a = hexToRgb(colorHex), red = _a.red, green = _a.green, blue = _a.blue;\r\n    return rgbToCmyk(red, green, blue);\r\n}\n\n/**\r\n * Takes given red, green, and blue values and returns the HSL representation\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {Hsl} The HSL representation of the color\r\n */\r\nfunction rgbToHsl(red, green, blue) {\r\n    var redPercent = red / 255;\r\n    var greenPercent = green / 255;\r\n    var bluePercent = blue / 255;\r\n    var max = Math.max(redPercent, greenPercent, bluePercent);\r\n    var min = Math.min(redPercent, greenPercent, bluePercent);\r\n    var lightness = (max + min) / 2;\r\n    var hue = 0;\r\n    var saturation = 0;\r\n    if (red === green && red === blue) ;\r\n    else {\r\n        var diff = max - min;\r\n        saturation = lightness > 0.5 ? (diff / (2 - max - min)) : diff / (max + min);\r\n        switch (max) {\r\n            case redPercent: {\r\n                hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);\r\n                break;\r\n            }\r\n            case greenPercent: {\r\n                hue = (bluePercent - redPercent) / diff + 2;\r\n                break;\r\n            }\r\n            case bluePercent: {\r\n                hue = (redPercent - greenPercent) / diff + 4;\r\n                break;\r\n            }\r\n        }\r\n        hue /= 6;\r\n        hue *= 360;\r\n    }\r\n    return {\r\n        hue: hue,\r\n        saturation: saturation,\r\n        lightness: lightness,\r\n    };\r\n}\n\n/**\r\n * Converts a hex color string to its hue, saturation, and lightness\r\n * @param {string} colorHex The color value in hex format\r\n * @returns {Hsl} The HSL values for the color\r\n */\r\nfunction hexToHsl(colorHex) {\r\n    // Hex validation handled by hexToRgb\r\n    var _a = hexToRgb(colorHex), red = _a.red, green = _a.green, blue = _a.blue;\r\n    return rgbToHsl(red, green, blue);\r\n}\n\n/**\r\n * Takes given red, green, and blue values and returns the HSV representation\r\n * @param {number} red The red component of the color (0 - 255)\r\n * @param {number} green The green component of the color (0 - 255)\r\n * @param {number} blue The blue component of the color (0 - 255)\r\n * @returns {Hsv} The HSV representation of the color\r\n */\r\nfunction rgbToHsv(red, green, blue) {\r\n    var redPercent = red / 255;\r\n    var greenPercent = green / 255;\r\n    var bluePercent = blue / 255;\r\n    var max = Math.max(redPercent, greenPercent, bluePercent);\r\n    var min = Math.min(redPercent, greenPercent, bluePercent);\r\n    var diff = max - min;\r\n    var hue = 0;\r\n    var saturation = (max === 0) ? 0 : diff / max;\r\n    var value = max;\r\n    if (min === max) ;\r\n    else {\r\n        switch (max) {\r\n            case redPercent: {\r\n                hue = (greenPercent - bluePercent) / diff + (greenPercent < bluePercent ? 6 : 0);\r\n                break;\r\n            }\r\n            case greenPercent: {\r\n                hue = (bluePercent - redPercent) / diff + 2;\r\n                break;\r\n            }\r\n            case bluePercent: {\r\n                hue = (redPercent - greenPercent) / diff + 4;\r\n                break;\r\n            }\r\n        }\r\n        hue /= 6;\r\n        hue *= 360;\r\n    }\r\n    return {\r\n        hue: hue,\r\n        saturation: saturation,\r\n        value: value,\r\n    };\r\n}\n\n/**\r\n * Converts a hex color string to its hue, saturation, and value\r\n * @param {string} colorHex The color value in hex format\r\n * @returns {Hsv} The HSV values for the color\r\n */\r\nfunction hexToHsv(colorHex) {\r\n    // Hex validation handled by hexToRgb\r\n    var _a = hexToRgb(colorHex), red = _a.red, green = _a.green, blue = _a.blue;\r\n    return rgbToHsv(red, green, blue);\r\n}\n\nfunction hueToRgb(p, q, t) {\r\n    var clampedT = t;\r\n    if (t < 0) {\r\n        clampedT += 360;\r\n    }\r\n    if (clampedT > 360) {\r\n        clampedT -= 360;\r\n    }\r\n    if (clampedT < 60) {\r\n        return p + (q - p) * 6 * (clampedT / 360);\r\n    }\r\n    if (clampedT < 180) {\r\n        return q;\r\n    }\r\n    if (clampedT < 240) {\r\n        return p + (q - p) * ((240 - clampedT) / 360) * 6;\r\n    }\r\n    return p;\r\n}\r\n/**\r\n * Takes given hue, saturation and lightness and returns the respective RGB values\r\n * @param {number} hue The hue of the color (0.0 - 360.0)\r\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\r\n * @param {number} lightness The value of the color (0.0 - 1.0)\r\n * @returns {Rgb} The RGB values for the color\r\n */\r\nfunction hslToRgb(hue, saturation, lightness) {\r\n    // Bounds check\r\n    if ((hue < 0 || hue > 360)\r\n        || (saturation < 0 || saturation > 1)\r\n        || (lightness < 0 || lightness > 1)) {\r\n        throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');\r\n    }\r\n    // Achromatic\r\n    if (saturation === 0) {\r\n        var rgb = Math.round(lightness * 255);\r\n        return {\r\n            red: rgb,\r\n            green: rgb,\r\n            blue: rgb,\r\n        };\r\n    }\r\n    var q = (lightness < 0.5) ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;\r\n    var p = 2 * lightness - q;\r\n    var red = hueToRgb(p, q, hue + 120);\r\n    var green = hueToRgb(p, q, hue);\r\n    var blue = hueToRgb(p, q, hue - 120);\r\n    return {\r\n        red: Math.round(red * 255),\r\n        green: Math.round(green * 255),\r\n        blue: Math.round(blue * 255),\r\n    };\r\n}\n\n/**\r\n * Takes given hue, saturation and lightness and returns the hex color representation\r\n * @param {number} hue The hue of the color (0.0 - 360.0)\r\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\r\n * @param {number} lightness The lightness of the color (0.0 - 1.0)\r\n * @returns {string} The hex string representation of the color\r\n */\r\nfunction hslToHex(hue, saturation, lightness) {\r\n    // Bounds check handled by hslToRgb\r\n    var _a = hslToRgb(hue, saturation, lightness), red = _a.red, green = _a.green, blue = _a.blue;\r\n    return rgbToHex(red, green, blue);\r\n}\n\n/**\r\n * Takes given hue, saturation and value and returns the respective RGB values\r\n * @param {number} hue The hue of the color (0.0 - 360.0)\r\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\r\n * @param {number} value The value of the color (0.0 - 1.0)\r\n * @returns {Rgb} The RGB values for the color\r\n */\r\nfunction hsvToRgb(hue, saturation, value) {\r\n    // Bounds check\r\n    if ((hue < 0 || hue > 360)\r\n        || (saturation < 0 || saturation > 1)\r\n        || (value < 0 || value > 1)) {\r\n        throw new Error('Invalid hue, saturation, or value - all values must be between 0 and 1');\r\n    }\r\n    var red = 0;\r\n    var green = 0;\r\n    var blue = 0;\r\n    var huePercent = hue / 360;\r\n    var i = Math.floor(huePercent * 6);\r\n    var f = huePercent * 6 - i;\r\n    var p = value * (1 - saturation);\r\n    var q = value * (1 - f * saturation);\r\n    var t = value * (1 - (1 - f) * saturation);\r\n    switch (i % 6) {\r\n        case 0: {\r\n            red = value;\r\n            green = t;\r\n            blue = p;\r\n            break;\r\n        }\r\n        case 1: {\r\n            red = q;\r\n            green = value;\r\n            blue = p;\r\n            break;\r\n        }\r\n        case 2: {\r\n            red = p;\r\n            green = value;\r\n            blue = t;\r\n            break;\r\n        }\r\n        case 3: {\r\n            red = p;\r\n            green = q;\r\n            blue = value;\r\n            break;\r\n        }\r\n        case 4: {\r\n            red = t;\r\n            green = p;\r\n            blue = value;\r\n            break;\r\n        }\r\n        case 5: {\r\n            red = value;\r\n            green = p;\r\n            blue = q;\r\n            break;\r\n        }\r\n    }\r\n    red = Math.round(red * 255);\r\n    green = Math.round(green * 255);\r\n    blue = Math.round(blue * 255);\r\n    return {\r\n        red: red,\r\n        green: green,\r\n        blue: blue,\r\n    };\r\n}\n\n/**\r\n * Takes given hue, saturation and value and returns the hex color representation\r\n * @param {number} hue The hue of the color (0.0 - 360.0)\r\n * @param {number} saturation The saturation of the color (0.0 - 1.0)\r\n * @param {number} value The value of the color (0.0 - 1.0)\r\n * @returns {string} The hex string representation of the color\r\n */\r\nfunction hsvToHex(hue, saturation, value) {\r\n    // Bounds check handled by hsvToRgb\r\n    var _a = hsvToRgb(hue, saturation, value), red = _a.red, green = _a.green, blue = _a.blue;\r\n    return rgbToHex(red, green, blue);\r\n}\n\n/**\r\n * Removes invalid characters and formats color hex to 6 characters\r\n * @param {string} colorHex The color value in hex format to sanitize\r\n * @returns {string} The sanitized hex color\r\n */\r\nfunction sanitizeHex(colorHex) {\r\n    var sanitizedHex = colorHex.replace(/[^a-fA-F0-9]/g, '');\r\n    if (sanitizedHex.length === 0) {\r\n        sanitizedHex = '000000';\r\n    }\r\n    else if (sanitizedHex.length === 1) {\r\n        sanitizedHex = sanitizedHex[0].repeat(6);\r\n    }\r\n    else if (sanitizedHex.length === 2) {\r\n        sanitizedHex = \"\" + sanitizedHex[0].repeat(3) + sanitizedHex[1].repeat(3);\r\n    }\r\n    else if (sanitizedHex.length >= 3 && sanitizedHex.length < 6) {\r\n        sanitizedHex = \"\" + sanitizedHex[0].repeat(2) + sanitizedHex[1].repeat(2) + sanitizedHex[2].repeat(2);\r\n    }\r\n    else if (sanitizedHex.length > 6) {\r\n        sanitizedHex = sanitizedHex.substr(0, 6);\r\n    }\r\n    return \"#\" + sanitizedHex;\r\n}\n\nexport { cmykToHex, cmykToRgb, getPerceivedLuminance, hexToCmyk, hexToHsl, hexToHsv, hexToRgb, hslToHex, hslToRgb, hsvToHex, hsvToRgb, rgbToCmyk, rgbToHex, rgbToHsl, rgbToHsv, sanitizeHex };\n//# sourceMappingURL=colorutils.es.js.map\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n"]},"metadata":{},"sourceType":"module"}